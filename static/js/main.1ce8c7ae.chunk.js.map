{"version":3,"sources":["styles/theme.js","components/_base/text/Text.js","components/CitySelector/CitySelector.styles.js","assets/images/surr-weather-forecast.png","components/CitySelector/CitySelector.js","components/WeatherCard/WeatherCard.styles.js","components/WeatherCard/WeatherCard.js","components/WeatherList/WeatherList.styles.js","components/WeatherList/WeatherList.js","styles/GlobalStyle.js","hooks/UseFetch.js","apis/config.js","App.js","reportWebVitals.js","index.js"],"names":["theme","color","white","black","lightBlack","text","grey","lightGrey","orange","red","pink","blue","darkBlue","yellow","lightYellow","shadows","cards","border","radius","font","main","size","sectionHeadline","newsDetailHeadline","h1","h2","h3","h4","h5","h6","p","weight","bold","semibold","regular","book","light","thin","H2","styled","CheckWeatherButton","button","CheckWeatherInput","input","WeatherImg","img","Container","div","CitySelector","onSearch","useState","city","setCity","src","weatherimg","alt","placeholder","onChange","e","target","value","onKeyDown","keyCode","type","onClick","CardWrapper","Image","CardBody","Main","DateAndTime","Min","Max","WeatherCard","dt","tempMin","tempMax","icon","date","Date","variant","toLocaleDateString","toLocaleTimeString","Math","round","Wrapper","WeatherList","weathers","map","weather","temp_max","temp_min","GlobalStyle","createGlobalStyle","UseFetch","initialUrl","data","setData","error","setError","isLoading","setIsLoading","url","setUrl","useEffect","fetch","then","res","json","dat","cod","message","catch","API_KEY","App","className","console","log","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ce8c7ae.chunk.js","sourcesContent":["/**\n * Theme variables\n *\n * See: https://www.styled-components.com/docs/advanced#theming\n *\n *\n */\n\nconst theme = {\n  // Colors\n  color: {\n    white: '#fff',\n    black: '#0f0e17',\n    lightBlack: 'rgba(15, 14, 23, 0.85)',\n    text: '#fffffe',\n    grey: '#a7a9be',\n    lightGrey: '#f2f2f1',\n    orange: '#ff8906',\n    red: '#f85750',\n    pink: '#e53170',\n    blue: '#38798f',\n    darkBlue: '#1e5c9a',\n    yellow: '#ffd14a',\n    lightYellow: '#ffedc5',\n  },\n  // Shadows\n  shadows: {\n    cards:\n      '0 1px 9px 2px rgba(60, 64, 67, 0.03), 0 1px 1px 0 rgba(60, 64, 67, 0.15)',\n  },\n  // Borders\n  border: { radius: '3px' },\n  // Fonts\n  font: {\n    main: 'Open Sans',\n    size: {\n      sectionHeadline: '6.5rem',\n      newsDetailHeadline: '5.625rem',\n      h1: '4.375rem',\n      h2: '2.25rem',\n      h3: '1.25rem',\n      h4: '1rem',\n      h5: '0.875rem',\n      h6: '0.75rem',\n      p: '1rem',\n    },\n    weight: {\n      bold: 650,\n      semibold: 500,\n      regular: 400,\n      book: 250,\n      light: 150,\n      thin: 100,\n    },\n  },\n}\n\nexport default theme\n","import styled from 'styled-components';\r\nimport theme from '../../../styles/theme';\r\n\r\nexport const H1 = styled.h1`\r\n  text-transform: uppercase;\r\n  font-size: ${theme.font.size.h1};\r\n  font-variation-settings: 'wght' ${theme.font.weight.light};\r\n  line-height: 1.125;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nexport const H2 = styled.h2`\r\n  font-size: ${theme.font.size.h2};\r\n  font-weight: ${theme.font.weight.bold};\r\n  line-height: 1.125;\r\n  margin-top: 1rem;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nexport const H3 = styled.h3`\r\n  font-size: ${theme.font.size.h3};\r\n  margin-bottom: 0.75rem;\r\n  font-weight: ${theme.font.weight.bold};\r\n`;\r\n","import styled from 'styled-components'\nimport { theme } from '../../styles'\n\nexport const CheckWeatherButton = styled.button`\n  border: none;\n  font-size: ${theme.font.size.h5};\n  font-weight: ${theme.font.weight.bold};\n  background-color: ${theme.color.darkBlue};\n  opacity: 0.9;\n  color: ${theme.color.text};\n  cursor: pointer;\n  border-radius: ${theme.border.radius};\n  padding: 1rem 1.75rem;\n  width: 100%;\n  &:hover {\n    opacity: 1;\n  }\n`\n\nexport const CheckWeatherInput = styled.input`\n  border-radius: ${theme.border.radius};\n  font-size: ${theme.font.size.h5};\n  font-weight: ${theme.font.weight.bold};\n  transition: all 0.3s ease-in-out;\n  border: 3px solid #000;\n  color: ${theme.color.red};\n  background-color: ${theme.color.white};\n  margin-top: 0.5rem;\n  margin-bottom: 1rem;\n  outline: none;\n  padding: 1rem 0 1rem 1rem;\n  transition: all 0.3s ease;\n  width: 100%;\n`\n\nexport const WeatherImg = styled.img`\n  width: auto;\n  height: auto;\n  max-width: 450px;\n  max-height: 900px;\n`\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  @media (min-width: 768px) {\n    flex-wrap: wrap;\n    align-content: center;\n  }\n`\n","export default __webpack_public_path__ + \"static/media/surr-weather-forecast.b38758e3.png\";","import React, { useState } from 'react'\nimport { H2 } from '../_base/text/Text'\nimport {\n  CheckWeatherButton,\n  CheckWeatherInput,\n  WeatherImg,\n  Container,\n} from './CitySelector.styles'\nimport weatherimg from '../../assets/images/surr-weather-forecast.png'\n\nconst CitySelector = ({ onSearch }) => {\n  const [city, setCity] = useState('')\n\n  const onKeyDown = (e) => {\n    if (e.keyCode === 13) {\n      onSearch(city)\n    }\n  }\n\n  return (\n    <>\n      <Container>\n        <WeatherImg src={weatherimg} alt=\"weatherlogo\" />\n        <div>\n          <H2>Weather Report.</H2>\n        </div>\n        <div>\n          <form>\n            <CheckWeatherInput\n              placeholder=\"Enter city\"\n              // users input updates the value of city\n              onChange={(e) => setCity(e.target.value)}\n              // the value will be the currently selected city\n              value={city}\n              onKeyDown={onKeyDown}\n            />\n          </form>\n        </div>\n        <div>\n          {/* The event handler to handle the button click */}\n          <CheckWeatherButton type=\"button\" onClick={() => onSearch(city)}>\n            Check Weather\n          </CheckWeatherButton>\n        </div>\n      </Container>\n    </>\n  )\n}\n\nexport default CitySelector\n","import styled from 'styled-components'\nimport { theme } from '../../styles'\n\nexport const CardWrapper = styled.div`\n  overflow: hidden;\n  padding: 3rem 2rem;\n  margin: 48px auto 0;\n  width: 100%;\n  background-color: ${theme.color.blue};\n  box-shadow: 4.2px 8.5px 8.5px hsl(0deg 0% 0% / 0.37);\n  border-radius: 5px;\n  border: 3px solid black;\n`\n\nexport const Image = styled.img`\n  margin: 0;\n  padding: 0;\n  width: 150px;\n`\n\nexport const CardBody = styled.div`\n  padding: 2rem;\n  background-color: ${theme.color.lightYellow};\n  box-shadow: 4.2px 8.5px 8.5px hsl(0deg 0% 0% / 0.37);\n  color: ${theme.color.black};\n  border-radius: 5px;\n  border: 3px solid black;\n`\n\nexport const Main = styled.div`\n  margin-bottom: 1rem;\n  font-size: ${theme.font.size.h3};\n  font-weight: ${theme.font.weight.bold};\n  color: ${theme.color.black};\n`\n\nexport const DateAndTime = styled.p`\n  margin-bottom: 1rem;\n`\n\nexport const Min = styled.p`\n  color: ${theme.color.black};\n  font-weight: ${theme.font.weight.bold};\n`\n\nexport const Max = styled.p`\n  color: ${theme.color.black};\n  font-weight: ${theme.font.weight.bold};\n`\n","import React from 'react'\r\nimport {\r\n  CardWrapper,\r\n  Image,\r\n  CardBody,\r\n  Main,\r\n  DateAndTime,\r\n  Min,\r\n  Max,\r\n} from './WeatherCard.styles'\r\n\r\nconst WeatherCard = ({ dt, tempMin, tempMax, main, icon }) => {\r\n  // create date object\r\n  const date = new Date(dt)\r\n  return (\r\n    <CardWrapper>\r\n      <Image\r\n        variant=\"top\"\r\n        alt=\"card\"\r\n        // get the src from example url and pass the icon prop for icon code\r\n        src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n      />\r\n      <CardBody>\r\n        <Main>{main}</Main>\r\n        {/*  datetime is received in milliseconds, let's turn into local date time */}\r\n        <DateAndTime>\r\n          {date.toLocaleDateString()}\r\n          <br />\r\n          <span>{date.toLocaleTimeString()}</span>\r\n        </DateAndTime>\r\n        {/* minimum temperature */}\r\n        <Min>Min: {Math.round(tempMin)}°</Min>\r\n        {/* maximum temperature */}\r\n        <Max>Max: {Math.round(tempMax)}°</Max>\r\n      </CardBody>\r\n    </CardWrapper>\r\n  )\r\n}\r\n\r\nexport default WeatherCard\r\n","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  @media (min-width: 768px) {\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    grid-gap: 0 50px;\r\n  }\r\n  @media (min-width: 1330px) {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    grid-gap: 0 50px;\r\n  } ;\r\n`\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n`\r\n","/* eslint-disable arrow-body-style */\r\nimport React from 'react';\r\nimport WeatherCard from '../WeatherCard/WeatherCard';\r\nimport { Wrapper } from './WeatherList.styles';\r\n\r\nconst WeatherList = ({ weathers }) => {\r\n  return (\r\n    <Wrapper>\r\n      {weathers.map(({ dt, main, weather }) => (\r\n        <div key={dt}>\r\n          <WeatherCard\r\n            tempMax={main.temp_max}\r\n            tempMin={main.temp_min}\r\n            dt={dt * 1000}\r\n            main={weather[0].main}\r\n            icon={weather[0].icon}\r\n          />\r\n        </div>\r\n      ))}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default WeatherList;\r\n","import { createGlobalStyle } from 'styled-components'\r\nimport theme from './theme'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  /*\r\n    * Reset CSS\r\n    * http://meyerweb.com/eric/tools/css/reset/\r\n    * v2.0 | 20110126\r\n    * License: none (public domain)\r\n  */\r\n  html, body, div, span, applet, object, iframe,\r\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\n  a, abbr, acronym, address, big, cite, code,\r\n  del, dfn, em, img, ins, kbd, q, s, samp,\r\n  small, strike, strong, sub, sup, tt, var,\r\n  b, u, i, center,\r\n  dl, dt, dd, ol, ul, li,\r\n  fieldset, form, label, legend,\r\n  table, caption, tbody, tfoot, thead, tr, th, td,\r\n  article, aside, canvas, details, embed,\r\n  figure, figcaption, footer, header, hgroup,\r\n  menu, nav, output, ruby, section, summary,\r\n  time, mark, audio, video {\r\n    margin: 0;\r\n    padding: 0;\r\n    border: 0;\r\n    font-size: 100%;\r\n    font: inherit;\r\n    vertical-align: baseline;\r\n  }\r\n\r\n  /* HTML5 display-role reset for older browsers */\r\n  article, aside, details, figcaption, figure,\r\n  footer, header, hgroup, menu, nav, section {\r\n    display: block;\r\n  }\r\n\r\n  ol, ul {\r\n    list-style: none;\r\n  }\r\n\r\n  blockquote, q {\r\n    quotes: none;\r\n  }\r\n\r\n  blockquote::before, blockquote::after,\r\n  q::before, q::after {\r\n    content: '';\r\n    content: none;\r\n  }\r\n\r\n  table {\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n  }\r\n\r\n  /**\r\n   * fonts\r\n  */\r\n  @import url('https://fonts.googleapis.com/css2?family=Open+Sans&display=swap');\r\n\r\n  /**\r\n   * global\r\n  */\r\n  html {\r\n    box-sizing: border-box;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    font-family: 'Open Sans', sans-serif;\r\n  }\r\n  *, *:before, *:after {\r\n    box-sizing: inherit;\r\n  }\r\n\r\n  body {\r\n    font-family: 'Open Sans', sans-serif;\r\n    padding: 75px;\r\n    color: ${theme.color.black};\r\n    background-color: ${theme.color.lightGrey};\r\n  }\r\n\r\n  button, input {\r\n    font-family: 'Open Sans', sans-serif;\r\n  }\r\n\r\n  input:focus {\r\n    box-shadow: 0 0 5px ${theme.color.red};\r\n    border: 3px solid ${theme.color.red};\r\n  }\r\n\r\n`\r\n\r\nexport default GlobalStyle\r\n","import { useState, useEffect } from 'react';\r\n\r\nconst UseFetch = (initialUrl) => {\r\n  // create the state variables\r\n  const [data, setData] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(null);\r\n  const [url, setUrl] = useState(initialUrl);\r\n\r\n  useEffect(() => {\r\n    if (!url) return;\r\n    setIsLoading(true);\r\n\r\n    // clear old search\r\n    setData(null);\r\n    setError(null);\r\n\r\n    fetch(url)\r\n      .then((res) => res.json())\r\n      .then((dat) => {\r\n        // error handling if no data exists\r\n        setIsLoading(false);\r\n        if (dat.cod >= 400) {\r\n          setError(dat.message);\r\n          return;\r\n        }\r\n        setData(dat);\r\n      })\r\n      .catch((e) => {\r\n        setIsLoading(false);\r\n        setError(e);\r\n      });\r\n    // dependency array\r\n  }, [url]);\r\n\r\n  return {\r\n    data, error, isLoading, setUrl,\r\n  };\r\n};\r\n\r\nexport default UseFetch;\r\n","export const API_KEY = ['a07285169888a9a44976cf708e1d3d1a'];\r\nexport const API_BASE_URL = 'http://api.openweathermap.org/';\r\n","import React from 'react';\r\nimport CitySelector from './components/CitySelector/CitySelector';\r\nimport WeatherList from './components/WeatherList/WeatherList';\r\nimport GlobalStyle from './styles/GlobalStyle';\r\nimport UseFetch from './hooks/UseFetch';\r\nimport { API_KEY, API_BASE_URL } from './apis/config';\r\n\r\nconst App = () => {\r\n  // destructure the returned values from UseFetch\r\n  const {\r\n    data, error, isLoading, setUrl,\r\n  } = UseFetch();\r\n\r\n  // error handling and loading\r\n  const getContent = () => {\r\n    if (error) {\r\n      return (\r\n        <h2>\r\n          Error when fetching:\r\n          {' '}\r\n          {error}\r\n        </h2>\r\n      );\r\n    }\r\n    if (!data && isLoading) return <h2>LOADING...</h2>;\r\n    if (!data) return null;\r\n    console.log(data);\r\n    return <WeatherList weathers={data.list} />;\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <GlobalStyle />\r\n      <CitySelector onSearch={(city) => setUrl(`${API_BASE_URL}/data/2.5/forecast?q=${city}&cnt=5&appid=${API_KEY}&units=metric`)} />\r\n      {getContent()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","/* eslint-disable no-undef */\r\n/* eslint-disable import/no-named-as-default */\r\n/* eslint-disable import/no-named-as-default-member */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}